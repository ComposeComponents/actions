open module buildApp
extends "common/build-app-support.pkl"
import "common/common.pkl"

hidden versionNumberOffset = 0
hidden gradleVersionNameName = "version"
hidden gradleVersionCodeName = "versionCode"

hidden releaseTrackPublishingConfiguration: List<AppReleaseDescriptor>(isDistinctBy((e) -> List(e.appModule, e.flavor))) = List()

hidden buildUniversalApk = false

hidden apkBuildDescriptors: List<BuildDescriptor> = List(
    DEBUG_BUILD_DESCRIPTOR,
    RELEASE_BUILD_DESCRIPTOR
)

hidden aabBuildDescriptors: List<BuildDescriptor> = List(
    RELEASE_BUILD_DESCRIPTOR
)

// These functions should be in another file but pkl has a bug
local function generateMatrixInclude(
    descriptors: List<BuildDescriptor>,
    extras: Mapping<BuildDescriptor, Mapping<String, Any>>
): Listing<Mapping<String, Any>> = new Listing {
    for (descriptor in descriptors) {
        new Mapping {
            ["module"] = descriptor.appModule
            ["variant"] = descriptor.variant
            ["flavor"] = descriptor.flavor
            ["release"] = descriptor.release
            ["path"] = descriptor.path()
            ["name"] = descriptor.name()
            ...extras.getOrNull(descriptor) ?? new Mapping {}
        }
    }
}

local function buildJob(
    descriptors: List<BuildDescriptor>, 
    extension: String, 
    command: (BuildDescriptor) -> String, 
    folder: String
) = new Job {
    strategy = new JobStrategy {
        matrix = new Mapping {
            ["module"] = descriptors.map((d) -> d.appModule).distinct
            ["include"] = generateMatrixInclude(
                descriptors,
                new Mapping {
                    for (descriptor in descriptors) {
                        [descriptor] = new Mapping {
                            ["build-command"] = command.apply(descriptor)
                        }
                    }
                }
            )
        }
    }
    needs = new Listing {
        "version"
    }
    steps = new Listing {
        common.checkout
        common.setupJdk
        (common.gradle(
            "Build", 
            "${{ matrix.module }}:${{ matrix.build-command }}"
        )) {
            env = new Mapping {
                ["ORG_GRADLE_PROJECT_\(gradleVersionNameName)"] = "${{ needs.version.outputs.version }}"
                ["ORG_GRADLE_PROJECT_\(gradleVersionCodeName)"] = "${{ needs.version.outputs.versionCode }}"
            }
        }
        (common.signApp("./${{ matrix.module }}/build/outputs/\(folder)/${{ matrix.path }}/")) {
            `if` = "${{ matrix.release }}"
        }
        new CommandStep {
            name = "Rename \(extension)"
            run = "mv ${{steps.sign.outputs.signedFile}} ./${{ matrix.module }}-${{ matrix.name }}.\(extension)"
            `if` = "${{ matrix.release }}"
        }
        new CommandStep {
            name = "Rename \(extension)"
            run = "mv ./${{ matrix.module }}/build/outputs/\(folder)/${{ matrix.path }}/${{ matrix.module }}-${{ matrix.name }}.\(extension) ./${{ matrix.module }}-${{ matrix.name }}.\(extension)"
            `if` = "${{ !matrix.release }}"
        }
        new ActionStep {
            uses = "actions/upload-artifact@master"
            with = new Mapping {
                ["name"] = "${{ matrix.module }}-${{ matrix.name }}-\(extension)"
                ["path"] = "./${{ matrix.module }}-${{ matrix.name }}.\(extension)"
            }
        }
    }
}

local function releaseJob(
    descriptors: List<BuildDescriptor>, 
    extension: String
) = new Job {
    strategy = new JobStrategy {
        matrix = new Mapping {
            ["module"] = descriptors.map((d) -> d.appModule).distinct
            ["include"] = generateMatrixInclude(descriptors, new Mapping {})
        }
    }
    needs = new Listing {
        "version"
        "release"
        "build-\(extension)"
    }
    steps = new Listing {
        new ActionStep {
            uses = "actions/download-artifact@master"
            with = new Mapping {
                ["name"] = "${{ matrix.module }}-${{ matrix.name }}-\(extension)"
                ["path"] = "./"
            }
        }
        new ActionStep {
            name = "Upload Artifact to Release"
            uses = "actions/upload-release-asset@v1"
            env = new Mapping {
                ["GITHUB_TOKEN"] = "${{ secrets.GITHUB_TOKEN }}"
            }
            with = new Mapping {
                ["upload_url"] = "${{ needs.release.outputs.upload_url }}"
                ["asset_path"] = "./${{ matrix.module }}-${{ matrix.name }}.\(extension)"
                ["asset_name"] = "${{ matrix.module }}-${{ matrix.name }}-v${{ needs.version.outputs.version }}.\(extension)"
                ["asset_content_type"] = "application/zip"
            }
        }
    }  
}

name = "Build App"

on = new On {
    push = new Push {
        branches = new Listing {
            "main"
            "develop"
            "release/**"
        }
    }
    pull_request = new PullRequest {
        branches = new Listing {
            "main"
            "develop"
        }
    }
}

permissions = new Mapping {
    ["contents"] = "write"
}

jobs = new Mapping {
    ["version"] = new Job {
        outputs = new Mapping {
            ["version"] = "${{ steps.gitversion.outputs.semVer }}"
            ["versionCode"] = "${{ steps.run-number.outputs.versionCode }}"
        }
        steps = new Listing {
            common.checkout
            new ActionStep {
                name = "Install GitVersion"
                uses = "gittools/actions/gitversion/setup@v0.9.6"
                with = new Mapping {
                    ["versionSpec"] = "5.x"
                }
            }
            new ActionStep {
                name = "Use GitVersion"
                id = "gitversion"
                uses = "gittools/actions/gitversion/execute@v0.9.6"
                with = new Mapping {
                    ["useConfigFile"] = true
                    ["configFilePath"] = "./gitversion.yml"
                }
            }
            new CommandStep {
                id = "run-number"
                run = """
                current_run_number=${{ github.run_number }}
                new_number=$((current_run_number+\(versionNumberOffset)))
                echo "versionCode=${new_number}" >> $GITHUB_OUTPUT
                """
            }
            new CommandStep {
                name = "Generate Job Summary"
                run = "echo \"# Version Info\nSemantic Version: ${{ steps.gitversion.outputs.semVer }}\nVersion Number: ${{ steps.run-number.outputs.versionCode }}\" >> $GITHUB_STEP_SUMMARY"
            }
        }
    }
    ["build-apk"] = 
        if (!buildUniversalApk)
            buildJob(
                apkBuildDescriptors,
                "apk",
                (e) -> "build\(e.buildName(false))",
                "apk"
            )
        else 
            buildJob(
                apkBuildDescriptors,
                "apk",
                (e) -> "package\(e.buildName(true))UniversalApk",
                "apk_from_bundle"
            )
    ["build-aab"] = buildJob(
        aabBuildDescriptors,
        "aab",
        (e) -> "bundle\(e.buildName(false))",
        "bundle"
    )
    ["release"] = new Job {
        needs = new Listing {
            "version"
        }
        `if` = "github.event_name != 'pull_request'"
        permissions = new Mapping {
            ["contents"] = "write"
        }
        outputs = new Mapping {
            ["upload_url"] = "${{ steps.create_release.outputs.upload_url }}"
        }
        steps = new Listing {
            common.checkout
            common.create_release
        }
    }
    ["publish-apk-to-release"] = releaseJob(
        apkBuildDescriptors,
        "apk"
    )
    ["publish-aab-to-release"] = releaseJob(
        aabBuildDescriptors,
        "aab"
    )
    ["publish-aab-to-play-release-track"] = 
        let(configurations = releaseTrackPublishingConfiguration)
        if(
            configurations.length > 0
        ) new Job {
            strategy = new JobStrategy {
                matrix = new Mapping {
                    ["module"] = configurations.map((c) -> c.appModule).distinct
                    ["include"] = new Listing {
                        for (c in configurations) {
                            new Mapping {
                                ["module"] = c.appModule
                                ["package"] = c.packageName
                                ["track"] = c.track
                                ["name"] = aabBuildDescriptors.find(
                                    (d) -> d.release && d.flavor == c.flavor && d.appModule == c.appModule
                                ).name()
                            }
                        }
                    }
                }
            }
            needs = new Listing {
                "version"
                "build-aab"
            }
            steps = new Listing {
                new ActionStep {
                    uses = "actions/download-artifact@master"
                    with = new Mapping {
                        ["name"] = "${{ matrix.module }}-${{ matrix.name }}-aab"
                        ["path"] = "./"
                    }
                }
                new ActionStep {
                    id = "google-play"
                    uses = "r0adkll/upload-google-play@v1.1.3"
                    with = new Mapping {
                        ["serviceAccountJsonPlainText"] = "${{ secrets.SERVICE_ACCOUNT_JSON }}"
                        ["packageName"] = "${{ matrix.package }}"
                        ["releaseFiles"] = "./${{ matrix.module }}-${{ matrix.name }}.aab"
                        ["track"] = "${{ matrix.track }}"
                        ["changesNotSentForReview"] = true
                    }
                }
                new CommandStep {
                    run = "echo \"Internal release url: ${{ steps.google-play.outputs.internalSharingDownloadUrl }}\" >> $GITHUB_STEP_SUMMARY"
                }
            }
        } else null
}.toMap().filter((k,v) -> v != null).toMapping()