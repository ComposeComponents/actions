open module support
extends "./base.pkl"
import "./common.pkl"

class BuildDescriptor {
    appModule: String
    variant: String
    flavor: String?
    release: Boolean
    instant: Boolean = false
    hasMappingFile: Boolean = false

    fixed moduleFolder: String = "\(appModule.replaceAll(":", "/"))"
    fixed outputFolder: String = List(flavor, variant).filterNonNull().join("/")

    fixed full: String =
        let (variantName = variant.capitalize())
        let (flavorName = if (flavor == null) "" else flavor.capitalize())
        "\(flavorName)\(variantName)"
    function path(folder: String) = "./\(moduleFolder)/build/outputs/\(folder)/\(outputFolder)"
    fixed mappingFile = "./\(moduleFolder)/build/outputs/mapping/\(outputFolder)/mapping.txt"
    fixed fileName = List(
        appModule.split(":").last,
        flavor,
        variant
    ).filterNonNull().join("-")
    fixed artifactName = List(
        appModule.replaceAll(":", "-"),
        flavor,
        variant,
        if (instant) "instant" else null
    ).filterNonNull().join("-")
}

function releaseBuildDescriptor(_appModule: String, _hasMappingFile: Boolean) = new BuildDescriptor {
    appModule = _appModule
    variant = "release"
    release = true
    hasMappingFile = _hasMappingFile
}
function releaseInstantBuildDescriptor(_appModule: String, _hasMappingFile: Boolean) = new BuildDescriptor {
    appModule = _appModule
    variant = "release"
    release = true
    instant = true
    hasMappingFile = _hasMappingFile
}
function debugBuildDescriptor(_appModule: String) = new BuildDescriptor {
    appModule = _appModule
    variant = "debug"
    release = false
}

typealias ReleaseTrack = "internal" | "alpha" | "beta" | "production"

class AppReleaseDescriptor {
    appModule: String
    flavor: String? = null
    packageName: String
    track: ReleaseTrack = "internal"
}

function generateMatrixInclude(
    descriptors: List<BuildDescriptor>,
    folder: String
): Listing<Mapping<String, Any>> = new Listing {
    for (descriptor in descriptors) {
        new Mapping {
            ["module"] = descriptor.appModule
            ["command"] = descriptor.full
            ["variant"] = descriptor.variant
            ["flavor"] = descriptor.flavor
            ["release"] = descriptor.release
            ["path"] = descriptor.path(folder)
            ["fileName"] = descriptor.fileName
            ["name"] = descriptor.artifactName
            ["instant"] = descriptor.instant
            ["hasMappingFile"] = descriptor.hasMappingFile
            ["mappingFile"] = descriptor.mappingFile
        }
    }
}